[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_source = 'context_filetype.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source = 'neocomplete.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = ['neocomplete.vim','deoplete.nvim']

[[plugins]]
repo = 'eagletmt/neco-ghc'
depends = 'neocomplete.vim'
on_ft = 'haskell'
external_commands = 'ghc-mod'

#[[plugins]]
#repo = 'tyru/caw.vim'
#on_map = {nx = '<Plug>'}
#hook_add = '''
#  function! InitCaw() abort
#    if !&l:modifiable
#      silent! nunmap <buffer> gc
#      silent! xunmap <buffer> gc
#      silent! nunmap <buffer> gcc
#      silent! xunmap <buffer> gcc
#    else
#      nmap <buffer> gc <Plug>(caw:prefix)
#      xmap <buffer> gc <Plug>(caw:prefix)
#      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
#      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
#    endif
#  endfunction
#  call InitCaw()
#'''
#
#[[plugins]]
#repo = 'rhysd/vim-operator-surround'
#depends = 'vim-operator-user'
#on_map = {n = '<Plug>'}
#hook_add = '''
#  nmap <silent>sa <Plug>(operator-surround-append)a
#  nmap <silent>sd <Plug>(operator-surround-delete)a
#  nmap <silent>sr <Plug>(operator-surround-replace)a
#  nmap <silent>sc <Plug>(operator-surround-replace)a
#'''


[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_event = 'BufRead'

[[plugins]]
repo = 'ciaranm/securemodelines'
on_event = 'BufRead'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
hook_source = '''
let g:typescript_indent_disable = 1
'''

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['typescript', 'javascript']
hook_source = '''
'''

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_ft = ['typescript', 'javascript']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'ujihisa/unite-haskellimport'
on_ft = ['haskell']

[[plugins]]
repo = 'itchyny/vim-haskell-sort-import'
on_ft = ['haskell']

[[plugins]]
repo  =  'eagletmt/ghcmod-vim'
on_ft  =  ['haskell']

[[plugins]]
repo  =  'dag/vim2hs'
on_ft  =  ['haskell']
hook_source = '''
let g:haskell_conceal = 0
let g:haskell_conceal_enumerate = 0
'''

#[[plugins]]
#repo  =  'thinca/vim-quickrun'
#on_cmd  =  ['quickRun',  'QR']
#hook_source  =  '''
#command qr quickrun
#"let g:quickrun_config = {
#"\    "_":{
#"\    "runner":"terminal", 
#"\    "runner/terminal/opener":"vsplit"
#"\    }
#"\}
#'''

[[plugins]]
repo  =  'osyo-manga/shabadou.vim'
depends  =  'vim-quickrun.vim'
on_source  =  'vim-quickrun.vim'

[[plugins]]
repo  =  'jceb/vim-hier'
on_source  =  'vim-watchdogs.vim'

[[plugins]]
repo  =  'dannyob/quickfixstatus'
on_source  =  'vim-watchdogs.vim'

[[plugins]]
repo  =  'osyo-manga/vim-watchdogs'
on_event='InsertEnter'

[[plugins]]
repo  =  'thinca/vim-ref'

[[plugins]]
repo  =  'ujihisa/ref-hoogle'
depends = 'vim-ref'
on_ft  =  ['haskell']

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
depends = 'deoplete.nvim'
hook_source = '''
if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
endif
let g:deoplete#omni#input_patterns.tex = g:vimtex#re#deoplete

let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_view_general_options_latexmk = '--unique'
let g:vimtex_compiler_latexmk = {
      \ 'background' : 0,
      \ 'build_dir': '',
      \ 'continuous' : 1,
      \ 'options' : [
      \   '-pdfdvi',
      \   '-verbose',
      \   '-file-line-error',
      \   '-synctex=1',
      \   '-interaction=nonstopmode',
      \ ]}
let g:vimtex_compiler_latexmk_engines = {
      \ '_'                : '-pdfdvi',
      \ 'uplaex'           : '-pdfdvi',
      \ 'pdflatex'         : '-pdf',
      \ 'lualatex'         : '-lualatex',
      \ 'xelatex'          : '-xelatex',
      \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
      \ 'context (luatex)' : '-pdf -pdflatex=context',
      \ 'context (xetex)'  : '-pdf -pdflatex="texexec --xtx"',
      \}
let g:vimtex_compiler_latexrun_engines = {
      \ '_'                : 'uplatex',
      \ 'pdflatex'         : 'pdflatex',
      \ 'lualatex'         : 'lualatex',
      \ 'xelatex'          : 'xelatex',
      \}

let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_complete_enabled = 1
'''
#[[plugins]]
#repo = 'Valloric/YouCompleteMe'
#on_ft = ['c', 'cpp', 'cs', 'python', 'python3', 'go', 'javascript', 'typescript', 'rust', 'py', 'python2']
#hook_source = '''
#let g:ycm_global_ycm_extra_conf = '~/.vim/repos/github.com/Valloric/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
#let g:ycm_python_binary_path = '/usr/bin/python3'
#let g:ycm_autoclose_preview_window_after_completion=1
#let g:ycm_max_diagnostics_to_display=0
#'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_source=['neocomplete.vim','deoplete.nvim','YouCompleteMe']
hook_source = '''
  imap <silent><C-l>     <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-l>     <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-l>     <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = '~/.vim/neosnippets'
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event='InsertEnter'
hook_source = '''
let g:deoplete#enable_at_startup = 1
source ~/.vim/rc/plugins/deoplete.rc.vim
call deoplete#custom#source('LanguageClient','min_pattern_length',2)
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev='next'
depends=['deoplete.nvim']
on_ft=['c','cpp']
build='bash install.sh'
hook_add='''
set hidden
let g:LanguageClient_autoStart=1
let g:LanguageClient_serverCommands={
    \ 'c':['clangd'],
    \ 'cpp':['clangd'],
\}
let g:LanguageClient_loadSettings=1
nnoremap K :call LanguageClient#textDocument_hover()<CR>
'''
hook_source='''
set completefunc=LanguageClient#complete
'''
